// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2018 09:31:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Thunderbird_Turn_Signal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Thunderbird_Turn_Signal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg left_sw;
reg reset;
reg right_sw;
// wires                                               
wire la;
wire lb;
wire lc;
wire next_la;
wire next_lb;
wire next_lc;
wire next_ra;
wire next_rb;
wire next_rc;
wire ra;
wire rb;
wire rc;

// assign statements (if any)                          
Thunderbird_Turn_Signal i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.la(la),
	.lb(lb),
	.lc(lc),
	.left_sw(left_sw),
	.next_la(next_la),
	.next_lb(next_lb),
	.next_lc(next_lc),
	.next_ra(next_ra),
	.next_rb(next_rb),
	.next_rc(next_rc),
	.ra(ra),
	.rb(rb),
	.rc(rc),
	.reset(reset),
	.right_sw(right_sw)
);
initial 
begin 
#30000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// left_sw
initial
begin
	left_sw = 1'b0;
	left_sw = #5000 1'b1;
end 

// right_sw
initial
begin
	right_sw = 1'b0;
	right_sw = #10000 1'b1;
end 
endmodule

